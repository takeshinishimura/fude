[{"path":"https://takeshinishimura.github.io/fude/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Takeshi Nishimura Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://takeshinishimura.github.io/fude/articles/additional.html","id":"structure-of-combined-fude-polygon-data-with-agricultural-community-boundary-data","dir":"Articles","previous_headings":"","what":"Structure of Combined Fude Polygon Data with Agricultural Community Boundary Data","title":"Structure of Combined Fude Polygon Data with Agricultural Community Boundary Data","text":"7 types objects obtained combine_fude(), follows: possible values community combine_fude() can listed follows.  出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。","code":"names(db) ## [1] \"fude\"            \"fude_split\"      \"community\"       \"community_union\" ## [5] \"ov\"              \"lg\"              \"pref\" library(dplyr) library(data.tree) library(ggplot2)  b[[1]] |>   filter(grepl(\"松山\", KCITY_NAME)) |>   mutate(pathString = paste(PREF_NAME, CITY_NAME, KCITY_NAME, RCOM_NAME, sep = \"/\")) |>   data.tree::as.Node() |>   print(limit = 10) ##                              levelName ## 1  愛媛県                              ## 2   °--松山市                         ## 3       °--松山市                     ## 4           ¦--土居田                 ## 5           ¦--針田                   ## 6           ¦--小栗第１               ## 7           ¦--小栗第２               ## 8           ¦--小栗第３               ## 9           ¦--藤原第１               ## 10          °--... 102 nodes w/ 0 sub ggplot(data = b[[1]] |> filter(grepl(\"松山\", KCITY_NAME))) +    geom_sf(fill = NA) +   geom_sf_text(aes(label = RCOM_NAME), size = 2, family = \"Hiragino Sans\") +   theme_void()"},{"path":"https://takeshinishimura.github.io/fude/articles/example1.html","id":"using-gghighlight-package","dir":"Articles","previous_headings":"","what":"Using gghighlight Package","title":"Using `gghighlight` Package","text":"出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。","code":"library(dplyr) library(forcats) library(ggplot2) library(gghighlight)  db <- combine_fude(d, b, city = \"松山市\", old_village = \"興居島\", community = \"^(?!釣島).*\")  db$community <- db$community %>%   mutate(across(c(RCOM_NAME, RCOM_KANA, RCOM_ROMAJI), forcats::fct_rev)) db$fude <- db$fude %>%   mutate(across(c(RCOM_NAME, RCOM_KANA, RCOM_ROMAJI), forcats::fct_rev))  ggplot() +   geom_sf(data = db$community, aes(fill = RCOM_NAME), alpha = 0) +   geom_sf(data = db$fude, aes(fill = RCOM_NAME), linewidth = 0) +   gghighlight() +   facet_wrap(vars(RCOM_NAME)) +   theme_void() +   theme(legend.position = \"none\",         text = element_text(family = \"Hiragino Sans\")) ggplot(data = db$fude, aes(x = a, fill = land_type_jp)) +   geom_histogram(position = \"identity\", alpha = .5) +   labs(x = \"面積（a）\",        y = \"頻度\") +   facet_wrap(vars(RCOM_NAME)) +   labs(fill = \"耕地の種類\") +   theme_minimal() +   theme(text = element_text(family = \"Hiragino Sans\"))"},{"path":"https://takeshinishimura.github.io/fude/articles/example2.html","id":"drawing-agricultural-community-boundaries","dir":"Articles","previous_headings":"","what":"Drawing Agricultural Community Boundaries","title":"Drawing Agricultural Community Boundaries","text":"package may beneficial, especially R beginners, simply wanting draw agricultural community boundaries.  出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。  出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。","code":"library(dplyr) library(ggplot2) library(gghighlight) library(ggrepel)  db <- combine_fude(d, b, city = \"西予市\", old_village = \"遊子川\")  ggplot() +   geom_sf(data = db$pref, fill = NA) +   geom_sf(data = db$lg, fill = \"gray\") +   gghighlight(fill == 1,     unhighlighted_params = list(       alpha = .05     )) +   geom_sf(data = db$ov |> filter(fill == 1), fill = \"black\") +   geom_sf_text(data = db$lg |> filter(fill == 1),                aes(label = city_kanji),                size = 3,                nudge_x = -.025, nudge_y = -.025,                family = \"HiraKakuProN-W3\") +   geom_point(data = db$community_union, aes(x = x, y = y), colour = \"black\") +   geom_text_repel(data = db$community_union,                   aes(x = x, y = y),                   label = \"遊子川地区\",                   nudge_x = .3, nudge_y = -.025,                   segment.color = \"black\",                   size = 3,                   family = \"HiraKakuProN-W3\") +   theme_void() db <- combine_fude(d, b, city = \"八幡浜市\", old_village = \"真穴\")  ggplot(data = db$community) +   geom_sf(data = db$lg |> filter(fill == 1), fill = \"gray\") +   geom_sf_text(data = db$lg |> filter(fill == 1), aes(label = city_kanji), family = \"HiraKakuProN-W3\") +   geom_sf(fill = \"ivory\") + # geom_sf(data = db$fude, aes(fill = land_type), colour = NA) +   geom_sf_label(aes(label = RCOM_NAME), family = \"HiraKakuProN-W3\") +   theme_void() +   theme(legend.position = \"none\")"},{"path":"https://takeshinishimura.github.io/fude/articles/example3.html","id":"displaying-a-wide-area-map-with-cowplot","dir":"Articles","previous_headings":"","what":"Displaying a Wide Area Map with cowplot","title":"Displaying a Wide Area Map with cowplot","text":"want particular details map, example, execute following code.  出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。","code":"library(dplyr) library(sf) library(ggplot2) library(gghighlight) library(ggrepel) library(cowplot)  db <- combine_fude(d, b, city = \"松山市\", old_village = \"興居島\", community = \"^(?!釣島).*\")  minimap <- ggplot() +   geom_sf(data = db$lg, aes(fill = fill)) +   geom_sf_text(data = db$lg, aes(label = city_kanji), family = \"Hiragino Sans\") +   gghighlight(fill == 1) +   geom_sf(data = db$community_union, fill = \"black\", linewidth = 0) +   theme_void() +   theme(panel.background = element_rect(fill = \"aliceblue\")) +   scale_fill_manual(values = c(\"white\", \"gray\"))  mainmap <- ggplot() +   geom_sf(data = db$community, fill = \"white\") +   geom_sf(data = db$fude, aes(fill = RCOM_NAME)) +   geom_point(data = db$community, aes(x = x, y = y), colour = \"gray\") +   geom_text_repel(data = db$community,                   aes(x = x, y = y, label = RCOM_NAME),                   nudge_x = c(-.01, .01, -.01, -.012, .005, -.01, .01, .01),                   nudge_y = c(.005, .005, 0, .01, -.005, .01, 0, -.005),                   min.segment.length = .01,                   segment.color = \"gray\",                   size = 3,                   family = \"Hiragino Sans\") +   theme_void() +   theme(legend.position = \"none\")  x <- sf::st_bbox(db$lg |> filter(fill == 1))  ggdraw(mainmap) +   draw_plot(     {minimap +        geom_rect(aes(xmin = x$xmin, xmax = x$xmax,                      ymin = x$ymin, ymax = x$ymax),                  fill = NA,                  colour = \"black\",                  size = .5) +        coord_sf(xlim = x[c(\"xmin\", \"xmax\")],                 ylim = x[c(\"ymin\", \"ymax\")],                 expand = FALSE) +        theme(legend.position = \"none\")     },     x = .7,      y = 0,     width = .3,      height = .3)"},{"path":"https://takeshinishimura.github.io/fude/articles/example4.html","id":"relationship-between-the-residences-of-farmers-and-their-farmland","dir":"Articles","previous_headings":"","what":"Relationship Between the Residences of Farmers and Their Farmland","title":"Relationship Between the Residences of Farmers and Their Farmland","text":"can also visualize relationship residences farmers farmland.  出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。","code":"library(dplyr) library(sf) library(osmdata) library(ggplot2) library(ggmapinset) library(ggrepel)  db <- combine_fude(d, b, city = \"松山\", community = \"和気|安城寺|長戸|久万ノ台\")  set.seed(200) probabilities <- c(0.97, 0.01, 0.005, 0.005, 0.005, 0.005) names(probabilities) <- LETTERS[1:length(probabilities)] db$fude$farmer = factor(sample(names(probabilities),                                nrow(db$fude),                                replace = TRUE,                                prob = probabilities))  farm <- db$fude |>   group_by(farmer) |>   summarise(geometry = sf::st_union(geometry) |> sf::st_centroid()) |>   sf::st_set_crs(4326)  farm_radius <- farm |>   sf::st_transform(crs = sp::CRS(\"+init=epsg:32632\")) |>   sf::st_buffer(dist = units::as_units(1, \"km\")) |>   sf::st_transform(crs = 4326)  bbox <- sf::st_bbox(db$fude)  streets <- bbox |>   osmdata::opq() |>   osmdata::add_osm_feature(key = \"highway\",                             value = c(\"motorway\", \"primary\", \"secondary\", \"tertiary\",                                      \"residential\", \"living_street\",                                      \"unclassified\", \"service\", \"footway\")) |>   osmdata::osmdata_sf()  river <- bbox |>   osmdata::opq() |>   osmdata::add_osm_feature(key = \"waterway\", value = \"river\") |>   osmdata::osmdata_sf()  inset1 <- configure_inset(     centre = sf::st_geometry(farm)[farm$farmer == \"F\"],     scale = 3,     translation = c(-4, 1),     radius = 1, units = \"km\"   ) inset2 <- configure_inset(     centre = sf::st_geometry(farm)[farm$farmer == \"E\"],     scale = 3,     translation = c(4, -3),     radius = 1, units = \"km\"   )  farm$x <- sf::st_coordinates(farm)[, 1] farm$y <- sf::st_coordinates(farm)[, 2]  ggplot(data = db$fude) +   geom_sf(data = streets$osm_lines, colour = \"gray\") +   geom_sf(data = river$osm_lines, colour = \"skyblue\") +   geom_sf(aes(fill = farmer, colour = farmer), alpha = .5) +   geom_sf(data = farm, aes(colour = farmer)) +   geom_text_repel(data = farm,                   aes(x = x, y = y, label = farmer),                   nudge_x = c(.02, .02, .02, -.01, .02, -.012),                   nudge_y = c(.01, 0, -.005, -.005, .01, -.005),                   min.segment.length = 0,                   segment.color = \"black\",                   size = 3,                   family = \"Helvetica\") +   geom_sf_inset(data = streets$osm_lines, colour = \"gray\", map_base = \"none\", inset = inset1) +   geom_sf_inset(data = river$osm_lines, colour = \"skyblue\", map_base = \"none\", inset = inset1) +   geom_sf_inset(aes(fill = farmer, colour = farmer), alpha = .5, map_base = \"none\", inset = inset1) +   geom_inset_frame(inset = inset1) +   geom_sf_inset(data = streets$osm_lines, colour = \"gray\", map_base = \"none\", inset = inset2) +   geom_sf_inset(data = river$osm_lines, colour = \"skyblue\", map_base = \"none\", inset = inset2) +   geom_sf_inset(aes(fill = farmer, colour = farmer), alpha = .5, map_base = \"none\", inset = inset2) +   geom_inset_frame(inset = inset2) +   theme_void() +   theme(legend.position = \"none\")"},{"path":[]},{"path":"https://takeshinishimura.github.io/fude/articles/example5.html","id":"st_voronoi","dir":"Articles","previous_headings":"Testing the Functionality","what":"st_voronoi()","title":"Testing the Functionality","text":"出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。","code":"library(dplyr) library(ggplot2) library(sf) library(patchwork)  db <- combine_fude(d, b, city = \"松山市\", community = \"由良|北浦|鷲ケ巣|門田|馬磯|泊|御手洗|船越\")  db$fude_points <- db$fude %>%   sf::st_drop_geometry() %>%   dplyr::mutate(     geometry = purrr::map(centroid, ~ sf::st_point(c(.x[1], .x[2])))   ) %>%   dplyr::mutate(     geometry = sf::st_sfc(geometry, crs = 4326)   ) %>%   sf::st_as_sf(crs = 4326)  fude_points_projected <- sf::st_transform(db$fude_points, crs = 6677) community_union_projected <- sf::st_transform(db$community_union, crs = 6677)  voronoi <- fude_points_projected %>%   sf::st_geometry() %>%   sf::st_union() %>%   sf::st_voronoi() %>%   sf::st_collection_extract(type = \"POLYGON\") %>%   sf::st_sf(crs = 6677) %>%   sf::st_intersection(y = sf::st_geometry(community_union_projected)) %>%   sf::st_join(y = fude_points_projected) %>%   dplyr::select(-geometry.y) %>%   dplyr::rename(geometry = geometry.x) %>%   sf::st_cast(\"POLYGON\") %>%   sf::st_transform(crs = 4326)  map1 <- ggplot() +   geom_sf(data = db$fude |> filter(RCOM_NAME == \"泊\"), aes(fill = RCOM_NAME), linewidth = .3) +   geom_sf(data = db$fude_points |> filter(RCOM_NAME == \"泊\"), size = .5) +   geom_sf(data = db$community |> filter(RCOM_NAME == \"泊\"), aes(fill = RCOM_NAME), alpha = 0, linewidth = 1) +   theme_void() +   theme(legend.position = \"none\")  map2 <- ggplot() +   geom_sf(data = voronoi |> filter(RCOM_NAME == \"泊\"), aes(fill = RCOM_NAME), linewidth = .3) +   geom_sf(data = db$fude_points |> filter(RCOM_NAME == \"泊\"), size = .5) +   geom_sf(data = db$community |> filter(RCOM_NAME == \"泊\"), aes(fill = RCOM_NAME), alpha = 0, linewidth = 1) +   theme_void() +   theme(legend.position = \"none\")  map1 + map2 voronoi$area_voronoi <- sf::st_area(voronoi) voronoi$a_voronoi <- as.numeric(units::set_units(voronoi$area_voronoi, \"a\"))  ggplot(data = voronoi, aes(x = a_voronoi, fill = land_type_jp)) +   geom_histogram(position = \"identity\", alpha = .5) +   labs(x = \"面積（a）\",        y = \"頻度\") +   facet_wrap(vars(RCOM_NAME)) +   labs(fill = \"耕地の種類\") +   theme_minimal() +   theme(text = element_text(family = \"Hiragino Sans\"))"},{"path":"https://takeshinishimura.github.io/fude/articles/example5.html","id":"spdeppoly2nb-and-localmoran","dir":"Articles","previous_headings":"Testing the Functionality","what":"spdep::poly2nb() and localmoran()","title":"Testing the Functionality","text":"出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。","code":"library(spdep)  coords <- sf::st_coordinates(sf::st_centroid(voronoi)) nb <- spdep::poly2nb(voronoi, queen = TRUE) plot(nb, coords, cex = .01, col = \"red\") lw <- spdep::nb2listw(nb, style = \"W\", zero.policy = TRUE) (moran_test <- spdep::moran.test(voronoi$a, listw = lw)) ##  ##  Moran I test under randomisation ##  ## data:  voronoi$a   ## weights: lw   ## n reduced by no-neighbour observations   ##  ## Moran I statistic standard deviate = 15.109, p-value < 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic       Expectation          Variance  ##      0.2309847210     -0.0006510417      0.0002350384 localmoran <- spdep::localmoran(voronoi$a, listw = lw) localmoran_df <- as.data.frame(localmoran) voronoi$Ii <- localmoran_df$Ii  gI <- ggplot() +   geom_sf(data = voronoi, aes(fill = Ii), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  voronoi$p_values <- localmoran_df[, \"Pr(z != E(Ii))\"] sum(voronoi$p_values < 0.1, na.rm = TRUE) / nrow(voronoi) ## [1] 0.1892068 gp <- ggplot() +   geom_sf(data = voronoi, aes(fill = p_values), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0.1,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  gI + gp"},{"path":"https://takeshinishimura.github.io/fude/articles/example5.html","id":"spdepknn2nb-and-localmoran","dir":"Articles","previous_headings":"Testing the Functionality","what":"spdep::knn2nb() and localmoran()","title":"Testing the Functionality","text":"出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。  出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。","code":"coords1 <- sf::st_coordinates(db$fude_points) nb1 <- spdep::knn2nb(spdep::knearneigh(coords1, k = 4))  coords2 <- sf::st_coordinates(sf::st_centroid(voronoi)) nb2 <- spdep::knn2nb(spdep::knearneigh(coords2, k = 4))  par(mfrow = c(1, 2)) plot(nb1, coords1, cex = .010, col = \"red\") plot(nb2, coords2, cex = .010, col = \"red\") lw1 <- spdep::nb2listw(nb1, style = \"W\") (moran_test1 <- spdep::moran.test(db$fude_points$a, listw = lw1)) ##  ##  Moran I test under randomisation ##  ## data:  db$fude_points$a   ## weights: lw1     ##  ## Moran I statistic standard deviate = 13.722, p-value < 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic       Expectation          Variance  ##      0.2317222844     -0.0006506181      0.0002867890 lw2 <- spdep::nb2listw(nb2, style = \"W\") (moran_test2 <- spdep::moran.test(voronoi$a, listw = lw2)) ##  ##  Moran I test under randomisation ##  ## data:  voronoi$a   ## weights: lw2     ##  ## Moran I statistic standard deviate = 13.4, p-value < 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic       Expectation          Variance  ##      0.2257435726     -0.0006506181      0.0002854297 localmoran <- spdep::localmoran(db$fude_points$a, listw = lw1) localmoran_df <- as.data.frame(localmoran) db$fude2 <- db$fude db$fude2$Ii <- localmoran_df$Ii  gI <- ggplot() +   geom_sf(data = db$fude2, aes(fill = Ii), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  db$fude2$p_values <- localmoran_df[, \"Pr(z != E(Ii))\"] sum(db$fude2$p_values < 0.1) / nrow(db$fude2) ## [1] 0.1254876 gp <- ggplot() +   geom_sf(data = db$fude2, aes(fill = p_values), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0.1,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  gI + gp localmoran <- spdep::localmoran(voronoi$a, listw = lw2) localmoran_df <- as.data.frame(localmoran) voronoi$Ii <- localmoran_df$Ii  gI <- ggplot() +   geom_sf(data = voronoi, aes(fill = Ii), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  voronoi$p_values <- localmoran_df[, \"Pr(z != E(Ii))\"] sum(voronoi$p_values < 0.1) / nrow(voronoi) ## [1] 0.1280884 gp <- ggplot() +   geom_sf(data = voronoi, aes(fill = p_values), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0.1,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  gI + gp"},{"path":"https://takeshinishimura.github.io/fude/articles/usage.html","id":"additional-information","dir":"Articles","previous_headings":"","what":"Additional Information","title":"Function Usage","text":"7 types objects obtained combine_fude(), follows: possible values community combine_fude() can listed follows.   出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。","code":"## 8 communities have been extracted. names(db) ## [1] \"fude\"            \"fude_split\"      \"community\"       \"community_union\" ## [5] \"ov\"              \"lg\"              \"pref\" library(dplyr) library(data.tree) library(ggplot2) library(sf)  b[[1]] |>   filter(grepl(\"松山\", KCITY_NAME)) |>   mutate(pathString = paste(PREF_NAME, CITY_NAME, KCITY_NAME, RCOM_NAME, sep = \"/\")) |>   data.tree::as.Node() |>   print(limit = 10) ##                              levelName ## 1  愛媛県                              ## 2   °--松山市                         ## 3       °--松山市                     ## 4           ¦--土居田                 ## 5           ¦--針田                   ## 6           ¦--小栗第１               ## 7           ¦--小栗第２               ## 8           ¦--小栗第３               ## 9           ¦--藤原第１               ## 10          °--... 102 nodes w/ 0 sub ggplot(data = b[[1]] |> filter(grepl(\"松山\", KCITY_NAME))) +    geom_sf(fill = NA) +   geom_sf_text(aes(label = RCOM_NAME), size = 2, family = \"Hiragino Sans\") +   theme_void() db$fude_points <- db$fude %>%   sf::st_drop_geometry() %>%   dplyr::mutate(     geometry = purrr::map(centroid, ~ sf::st_point(c(.x[1], .x[2])))   ) %>%   dplyr::mutate(     geometry = sf::st_sfc(geometry, crs = 4326)   ) %>%   sf::st_as_sf(crs = 4326)  fude_points_projected <- sf::st_transform(db$fude_points, crs = 6677) community_union_projected <- sf::st_transform(db$community_union, crs = 6677)  voronoi <- fude_points_projected %>%   sf::st_geometry() %>%   sf::st_union() %>%   sf::st_voronoi() %>%   sf::st_collection_extract(type = \"POLYGON\") %>%   sf::st_sf(crs = 6677) %>%   sf::st_intersection(y = sf::st_geometry(community_union_projected)) %>%   sf::st_join(y = fude_points_projected) %>%   dplyr::select(-geometry.y) %>%   dplyr::rename(geometry = geometry.x) %>%   sf::st_cast(\"POLYGON\") %>%   sf::st_transform(crs = 4326)  library(patchwork)  map1 <- ggplot() +   geom_sf(data = db$fude |> filter(RCOM_NAME == \"泊\"), aes(fill = RCOM_NAME), linewidth = .3) +   geom_sf(data = db$fude_points |> filter(RCOM_NAME == \"泊\"), size = .5) +   geom_sf(data = db$community |> filter(RCOM_NAME == \"泊\"), aes(fill = RCOM_NAME), alpha = 0, linewidth = 1) +   theme_void() +   theme(legend.position = \"none\")  map2 <- ggplot() +   geom_sf(data = voronoi |> filter(RCOM_NAME == \"泊\"), aes(fill = RCOM_NAME), linewidth = .3) +   geom_sf(data = db$fude_points |> filter(RCOM_NAME == \"泊\"), size = .5) +   geom_sf(data = db$community |> filter(RCOM_NAME == \"泊\"), aes(fill = RCOM_NAME), alpha = 0, linewidth = 1) +   theme_void() +   theme(legend.position = \"none\")  map1 + map2 voronoi$area_voronoi <- sf::st_area(voronoi) voronoi$a_voronoi <- as.numeric(units::set_units(voronoi$area_voronoi, \"a\"))  ggplot(data = voronoi, aes(x = a_voronoi, fill = land_type_jp)) +   geom_histogram(position = \"identity\", alpha = .5) +   labs(x = \"面積（a）\",        y = \"頻度\") +   facet_wrap(vars(RCOM_NAME)) +   labs(fill = \"耕地の種類\") +   theme_minimal() +   theme(text = element_text(family = \"Hiragino Sans\")) library(spdep)  coords <- sf::st_coordinates(sf::st_centroid(voronoi)) nb <- spdep::poly2nb(voronoi, queen = TRUE) plot(nb, coords, cex = .01, col = \"red\") lw <- spdep::nb2listw(nb, style = \"W\", zero.policy = TRUE) (moran_test <- spdep::moran.test(voronoi$a, listw = lw)) ##  ##  Moran I test under randomisation ##  ## data:  voronoi$a   ## weights: lw   ## n reduced by no-neighbour observations   ##  ## Moran I statistic standard deviate = 15.109, p-value < 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic       Expectation          Variance  ##      0.2309847210     -0.0006510417      0.0002350384 localmoran <- spdep::localmoran(voronoi$a, listw = lw) localmoran_df <- as.data.frame(localmoran) voronoi$Ii <- localmoran_df$Ii  gI <- ggplot() +   geom_sf(data = voronoi, aes(fill = Ii), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  voronoi$p_values <- localmoran_df[, \"Pr(z != E(Ii))\"] sum(voronoi$p_values < 0.1, na.rm = TRUE) / nrow(voronoi) ## [1] 0.1892068 gp <- ggplot() +   geom_sf(data = voronoi, aes(fill = p_values), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0.1,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  gI + gp coords1 <- sf::st_coordinates(db$fude_points) nb1 <- spdep::knn2nb(spdep::knearneigh(coords1, k = 4))  coords2 <- sf::st_coordinates(sf::st_centroid(voronoi)) nb2 <- spdep::knn2nb(spdep::knearneigh(coords2, k = 4))  par(mfrow = c(1, 2)) plot(nb1, coords1, cex = .010, col = \"red\") plot(nb2, coords2, cex = .010, col = \"red\") lw1 <- spdep::nb2listw(nb1, style = \"W\") (moran_test1 <- spdep::moran.test(db$fude_points$a, listw = lw1)) ##  ##  Moran I test under randomisation ##  ## data:  db$fude_points$a   ## weights: lw1     ##  ## Moran I statistic standard deviate = 13.722, p-value < 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic       Expectation          Variance  ##      0.2317222844     -0.0006506181      0.0002867890 lw2 <- spdep::nb2listw(nb2, style = \"W\") (moran_test2 <- spdep::moran.test(voronoi$a, listw = lw2)) ##  ##  Moran I test under randomisation ##  ## data:  voronoi$a   ## weights: lw2     ##  ## Moran I statistic standard deviate = 13.4, p-value < 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic       Expectation          Variance  ##      0.2257435726     -0.0006506181      0.0002854297 localmoran <- spdep::localmoran(db$fude_points$a, listw = lw1) localmoran_df <- as.data.frame(localmoran) db$fude2 <- db$fude db$fude2$Ii <- localmoran_df$Ii  gI <- ggplot() +   geom_sf(data = db$fude2, aes(fill = Ii), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  db$fude2$p_values <- localmoran_df[, \"Pr(z != E(Ii))\"] sum(db$fude2$p_values < 0.1) / nrow(db$fude2) ## [1] 0.1254876 gp <- ggplot() +   geom_sf(data = db$fude2, aes(fill = p_values), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0.1,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  gI + gp localmoran <- spdep::localmoran(voronoi$a, listw = lw2) localmoran_df <- as.data.frame(localmoran) voronoi$Ii <- localmoran_df$Ii  gI <- ggplot() +   geom_sf(data = voronoi, aes(fill = Ii), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  voronoi$p_values <- localmoran_df[, \"Pr(z != E(Ii))\"] sum(voronoi$p_values < 0.1) / nrow(voronoi) ## [1] 0.1280884 gp <- ggplot() +   geom_sf(data = voronoi, aes(fill = p_values), colour = \"black\", linewidth = 0) +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0.1,                         space = \"Lab\", na.value = \"grey50\",                         guide = \"colourbar\", aesthetics = \"fill\") +   theme_void()  gI + gp"},{"path":"https://takeshinishimura.github.io/fude/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Takeshi Nishimura. Author, copyright holder, maintainer.","code":""},{"path":"https://takeshinishimura.github.io/fude/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nishimura T (2024). fude: Utilities Fude Polygon. R package version 0.3.6.9000, https://takeshinishimura.github.io/fude/, https://github.com/takeshinishimura/fude.","code":"@Manual{,   title = {fude: Utilities for Fude Polygon},   author = {Takeshi Nishimura},   year = {2024},   note = {R package version 0.3.6.9000,     https://takeshinishimura.github.io/fude/},   url = {https://github.com/takeshinishimura/fude}, }"},{"path":"https://takeshinishimura.github.io/fude/index.html","id":"fude","dir":"","previous_headings":"","what":"Utilities for Fude Polygon","title":"Utilities for Fude Polygon","text":"fude package provides utilities facilitate handling Fude Polygon data downloadable Ministry Agriculture, Forestry Fisheries (MAFF) website. word “fude” Japanese counter suffix used denote land parcels.","code":""},{"path":"https://takeshinishimura.github.io/fude/index.html","id":"obtaining-data","dir":"","previous_headings":"","what":"Obtaining Data","title":"Utilities for Fude Polygon","text":"Download Fude Polygon data following MAFF release site (available Japanese): https://open.fude.maff.go.jp","code":""},{"path":"https://takeshinishimura.github.io/fude/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utilities for Fude Polygon","text":"can install released version fude CRAN : development version GitHub :","code":"install.packages(\"fude\") # install.packages(\"devtools\") devtools::install_github(\"takeshinishimura/fude\")"},{"path":[]},{"path":"https://takeshinishimura.github.io/fude/index.html","id":"reading-fude-polygon-data","dir":"","previous_headings":"Usage","what":"Reading Fude Polygon Data","title":"Utilities for Fude Polygon","text":"can let R read downloaded ZIP file directly without unzipping .","code":"library(fude) d <- read_fude(\"~/2022_38.zip\")"},{"path":"https://takeshinishimura.github.io/fude/index.html","id":"renaming-columns","dir":"","previous_headings":"Usage","what":"Renaming Columns","title":"Utilities for Fude Polygon","text":"can convert local government codes Japanese municipality names easier management. can also rename columns Romaji instead Japanese.","code":"d2 <- rename_fude(d) names(d2) #>  [1] \"2022_松山市\"     \"2022_今治市\"     \"2022_宇和島市\"   \"2022_八幡浜市\"   #>  [5] \"2022_新居浜市\"   \"2022_西条市\"     \"2022_大洲市\"     \"2022_伊予市\"     #>  [9] \"2022_四国中央市\" \"2022_西予市\"     \"2022_東温市\"     \"2022_上島町\"     #> [13] \"2022_久万高原町\" \"2022_松前町\"     \"2022_砥部町\"     \"2022_内子町\"     #> [17] \"2022_伊方町\"     \"2022_松野町\"     \"2022_鬼北町\"     \"2022_愛南町\" d2 <- d |> rename_fude(suffix = TRUE, romaji = \"title\") names(d2) #>  [1] \"2022_Matsuyama-shi\"   \"2022_Imabari-shi\"     \"2022_Uwajima-shi\"     #>  [4] \"2022_Yawatahama-shi\"  \"2022_Niihama-shi\"     \"2022_Saijo-shi\"       #>  [7] \"2022_Ozu-shi\"         \"2022_Iyo-shi\"         \"2022_Shikokuchuo-shi\" #> [10] \"2022_Seiyo-shi\"       \"2022_Toon-shi\"        \"2022_Kamijima-cho\"    #> [13] \"2022_Kumakogen-cho\"   \"2022_Matsumae-cho\"    \"2022_Tobe-cho\"        #> [16] \"2022_Uchiko-cho\"      \"2022_Ikata-cho\"       \"2022_Matsuno-cho\"     #> [19] \"2022_Kihoku-cho\"      \"2022_Ainan-cho\""},{"path":"https://takeshinishimura.github.io/fude/index.html","id":"getting-agricultural-community-boundary-data","dir":"","previous_headings":"Usage","what":"Getting Agricultural Community Boundary Data","title":"Utilities for Fude Polygon","text":"can download agricultural community boundary data, corresponds Fude Polygon data, MAFF website https://www.maff.go.jp/j/tokei/census/shuraku_data/2020/ma/ (available Japanese). can easily create map combines Fude Polygons agricultural community boundaries.  出典：農林水産省「筆ポリゴンデータ（2022年度公開）」および「農業集落境界データ（2022年度）」を加工して作成。 Polygon data near community borders may divided. avoid , use db$fude.  Source: Created processing Ministry Agriculture, Forestry Fisheries, ‘Fude Polygon Data (released FY2022)’ ‘Agricultural Community Boundary Data (FY2022)’. Polygons community boundaries divided assigned one communities. need adjust automatic assignment, need write custom code. rows require attention can identified following command.","code":"b <- get_boundary(d) db <- combine_fude(d, b, city = \"松山市\", community = \"由良|北浦|鷲ケ巣|門田|馬磯|泊|御手洗|船越\")  library(ggplot2)  ggplot() +   geom_sf(data = db$fude_split, aes(fill = RCOM_NAME)) +   guides(fill = guide_legend(reverse = TRUE, title = \"興居島の集落別耕地\")) +   theme_void() +   theme(text = element_text(family = \"Hiragino Sans\")) library(ggforce)  ggplot() +   geom_sf(data = db$community, fill = NA) +   geom_sf(data = db$fude, aes(fill = RCOM_ROMAJI)) +   geom_mark_hull(data = db$fude,                   aes(x = point_lng, y = point_lat,                      fill = RCOM_ROMAJI,                      label = RCOM_ROMAJI),                  colour = NA,                  expand = unit(1, \"mm\"),                  radius = unit(1, \"mm\"),                  label.fontsize = 9,                  label.family = \"Helvetica\",                  label.fill = NA,                  label.colour = \"black\",                  label.buffer = unit(1, \"mm\"),                  con.colour = \"gray70\") +   theme_void() +   theme(legend.position = \"none\") library(dplyr) library(sf)  # head(sf::st_drop_geometry(db$fude[db$fude$polygon_uuid %in% db$fude_split$polygon_uuid[duplicated(db$fude_split$polygon_uuid)], c(\"polygon_uuid\", \"PREF_NAME\", \"CITY_NAME\", \"KCITY_NAME\", \"RCOM_NAME\", \"RCOM_KANA\", \"RCOM_ROMAJI\")])) db$fude |>   filter(polygon_uuid %in% (db$fude_split |> filter(duplicated(polygon_uuid)) |> pull(polygon_uuid))) |>   sf::st_drop_geometry() |>   select(polygon_uuid, KCITY_NAME, RCOM_NAME, RCOM_KANA, RCOM_ROMAJI) |>   head() #> # A tibble: 6 × 5 #>   polygon_uuid                        KCITY_NAME RCOM_NAME RCOM_KANA RCOM_ROMAJI #>   <chr>                               <fct>      <fct>     <fct>     <fct>       #> 1 8085bc47-9af5-440f-89e9-f188d3b957… 興居島村   泊        とまり    Tomari      #> 2 26920da0-b63e-4994-a9eb-175e2982fe… 興居島村   門田      かどた    Kadota      #> 3 ac2e7293-6c2f-4feb-a95f-4729dc8d0a… 興居島村   由良      ゆら      Yura        #> 4 ea130038-7035-4cf3-b71c-091783090d… 興居島村   船越      ふなこし  Funakoshi   #> 5 4aba8229-1b14-4eab-8a91-e10d9e8411… 興居島村   船越      ふなこし  Funakoshi   #> 6 156a3459-25cb-494c-824f-9ba6b0fb6f… 興居島村   由良      ゆら      Yura"},{"path":"https://takeshinishimura.github.io/fude/index.html","id":"visualizing-fude-polygon-data","dir":"","previous_headings":"Usage","what":"Visualizing Fude Polygon Data","title":"Utilities for Fude Polygon","text":"can confirm Fude Polygon data detail. feature heavily inspired following website: https://brendenmsmith.com/blog/shiny_map_filter/.","code":"library(shiny)  s <- shiny_fude(db, community = TRUE) # shiny::shinyApp(ui = s$ui, server = s$server)"},{"path":"https://takeshinishimura.github.io/fude/index.html","id":"using-mapview-package","dir":"","previous_headings":"Usage","what":"Using mapview package","title":"Utilities for Fude Polygon","text":"want use mapview(), following.","code":"db1 <- combine_fude(d, b, city = \"伊方町\") db2 <- combine_fude(d, b, city = \"八幡浜市\") db3 <- combine_fude(d, b, city = \"西予市\", old_village = \"三瓶|二木生|三島|双岩\") db <- bind_fude(db1, db2, db3)  library(mapview)  mapview::mapview(db$fude, zcol = \"RCOM_NAME\", layer.name = \"農業集落名\")"},{"path":"https://takeshinishimura.github.io/fude/reference/bind_fude.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind multiple Fude Polygon data — bind_fude","title":"Bind multiple Fude Polygon data — bind_fude","text":"bind_fude() binds list polygon data. also binds list data combined combine_fude().","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/bind_fude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind multiple Fude Polygon data — bind_fude","text":"","code":"bind_fude(...)"},{"path":"https://takeshinishimura.github.io/fude/reference/bind_fude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind multiple Fude Polygon data — bind_fude","text":"... Database lists combined. named elements.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/bind_fude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind multiple Fude Polygon data — bind_fude","text":"list sf::sf() object(s).","code":""},{"path":[]},{"path":"https://takeshinishimura.github.io/fude/reference/bind_fude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind multiple Fude Polygon data — bind_fude","text":"","code":"path <- system.file(\"extdata\", \"castle.zip\", package = \"fude\") d1 <- read_fude(path, stringsAsFactors = FALSE, quiet = TRUE) d2 <- read_fude(path, stringsAsFactors = FALSE, quiet = TRUE) bind_fude(d1, d2) #> $`2021_382019` #> Simple feature collection with 1 feature and 12 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.7653 ymin: 33.84506 xmax: 132.7662 ymax: 33.84575 #> Geodetic CRS:  WGS 84 #>   X_color X_opacity X_weight X_fillColor X_fillOpacity local_government_cd #> 1 #000000       0.5        3     #ff0000           0.5              382019 #>             area        a farmland_name owner farmer crop #> 1 4562.345 [m^2] 45.62345                                 #>                         geometry #> 1 POLYGON ((132.7653 33.84575... #>  #> $`2022_382019` #> Simple feature collection with 1 feature and 12 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.7653 ymin: 33.84506 xmax: 132.7662 ymax: 33.84575 #> Geodetic CRS:  WGS 84 #>   X_color X_opacity X_weight X_fillColor X_fillOpacity local_government_cd #> 1 #000000       0.5        3     #ff0000           0.5              382019 #>             area        a farmland_name owner farmer crop #> 1 4562.345 [m^2] 45.62345                                 #>                         geometry #> 1 POLYGON ((132.7653 33.84575... #>  #> $`2022_382078` #> Simple feature collection with 1 feature and 12 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.541 ymin: 33.50931 xmax: 132.5415 ymax: 33.50966 #> Geodetic CRS:  WGS 84 #>   X_color X_opacity X_weight X_fillColor X_fillOpacity local_government_cd #> 1 #000000       0.5        3     #ff0000           0.5              382078 #>             area        a farmland_name owner farmer crop #> 1 1303.347 [m^2] 13.03347                                 #>                         geometry #> 1 POLYGON ((132.541 33.50966,... #>"},{"path":"https://takeshinishimura.github.io/fude/reference/cite_fude.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Citation Text for Fude Polygon Data — cite_fude","title":"Generate Citation Text for Fude Polygon Data — cite_fude","text":"Generates citation text Japanese English Fude Polygon Data.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/cite_fude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Citation Text for Fude Polygon Data — cite_fude","text":"","code":"cite_fude(data)"},{"path":"https://takeshinishimura.github.io/fude/reference/cite_fude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Citation Text for Fude Polygon Data — cite_fude","text":"data list data frame containing Fude Polygon data.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/cite_fude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Citation Text for Fude Polygon Data — cite_fude","text":"list two elements: ja Japanese citation text en English citation text.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/cite_fude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Citation Text for Fude Polygon Data — cite_fude","text":"","code":"if (FALSE) { # \\dontrun{ data <- list(fude = data.frame(issue_year = c(2021, 2020), boundary_edit_year = c(2019, 2020))) cite_fude(data) } # }"},{"path":"https://takeshinishimura.github.io/fude/reference/combine_fude.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine the Fude Polygon data with the agricultural community boundary data — combine_fude","title":"Combine the Fude Polygon data with the agricultural community boundary data — combine_fude","text":"combine_fude() uses agricultural community boundary data reduce Fude Polygon data community units.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/combine_fude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine the Fude Polygon data with the agricultural community boundary data — combine_fude","text":"","code":"combine_fude(   data,   boundary,   city,   old_village = \"\",   community = \"\",   year = NULL )"},{"path":"https://takeshinishimura.github.io/fude/reference/combine_fude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine the Fude Polygon data with the agricultural community boundary data — combine_fude","text":"data List sf::sf() objects. boundary List one agricultural community boundary data provided MAFF. city local government name Japanese extracted. case overlapping local government names, must contain prefecture name Japanese prefecture code romaji (e.g., \"Fuchu-shi, 13\", \"fuchu 13\",  \"34 fuchu-shi\",  \"34, FUCHU-CHO\"). Alternatively, 6-digit local government code. old_village String regular expression. One old village name Japanese extracted. community String regular expression. One agricultural community name Japanese extracted. year Year column name data. one applicable local government code, required.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/combine_fude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine the Fude Polygon data with the agricultural community boundary data — combine_fude","text":"list sf::sf() objects.","code":""},{"path":[]},{"path":"https://takeshinishimura.github.io/fude/reference/combine_fude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine the Fude Polygon data with the agricultural community boundary data — combine_fude","text":"","code":"if (FALSE) { # interactive() path <- system.file(\"extdata\", \"castle.zip\", package = \"fude\") d <- read_fude(path, stringsAsFactors = FALSE) b <- get_boundary(d) db <- combine_fude(d, b, \"\\u677e\\u5c71\\u5e02\", \"\\u57ce\\u6771\", year = 2022) }"},{"path":"https://takeshinishimura.github.io/fude/reference/extract_fude.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specified Fude Polygon data — extract_fude","title":"Extract specified Fude Polygon data — extract_fude","text":"extract_fude() extracts specified data list returned read_fude().","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/extract_fude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specified Fude Polygon data — extract_fude","text":"","code":"extract_fude(data, year = NULL, city = NULL, list = TRUE)"},{"path":"https://takeshinishimura.github.io/fude/reference/extract_fude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specified Fude Polygon data — extract_fude","text":"data List sf::sf() objects. year Years extracted. city Local government names codes extracted. list logical. FALSE, object extracted longer list.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/extract_fude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specified Fude Polygon data — extract_fude","text":"list sf::sf() object(s).","code":""},{"path":[]},{"path":"https://takeshinishimura.github.io/fude/reference/extract_fude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specified Fude Polygon data — extract_fude","text":"","code":"path <- system.file(\"extdata\", \"castle.zip\", package = \"fude\") d <- read_fude(path, stringsAsFactors = FALSE, quiet = TRUE) d2 <- extract_fude(d, year = 2022)"},{"path":"https://takeshinishimura.github.io/fude/reference/filter_fude.html","id":null,"dir":"Reference","previous_headings":"","what":"Get agricultural community boundary data — filter_fude","title":"Get agricultural community boundary data — filter_fude","text":"filter_fude() uses agricultural community boundary data reduce Fude Polygon data community units.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/filter_fude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get agricultural community boundary data — filter_fude","text":"","code":"filter_fude(data, boundary, city, community, year = NULL)"},{"path":"https://takeshinishimura.github.io/fude/reference/filter_fude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get agricultural community boundary data — filter_fude","text":"data List sf::sf() objects. boundary List one agricultural community boundary data provided MAFF. city local government name Japanese extracted. case overlapping local government names, prefecture name must included (e.g., Fuchu-shi). community String regular expression. One agricultural community name Japanese extracted. year Year column name data, one applicable local government code.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/filter_fude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get agricultural community boundary data — filter_fude","text":"list sf::sf() objects.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/filter_fude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get agricultural community boundary data — filter_fude","text":"","code":"path <- system.file(\"extdata\", \"castle.zip\", package = \"fude\") d <- read_fude(path) #> Reading layer `2021_382019' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/RtmpcloDHK/filec4cc373230a7/castle/2021_382019.json'  #>   using driver `GeoJSON' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.7653 ymin: 33.84506 xmax: 132.7662 ymax: 33.84575 #> Geodetic CRS:  WGS 84 #> Reading layer `2022_382019' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/RtmpcloDHK/filec4cc373230a7/castle/2022_382019.json'  #>   using driver `GeoJSON' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.7653 ymin: 33.84506 xmax: 132.7662 ymax: 33.84575 #> Geodetic CRS:  WGS 84 #> Reading layer `2022_382078' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/RtmpcloDHK/filec4cc373230a7/castle/2022_382078.json'  #>   using driver `GeoJSON' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.541 ymin: 33.50931 xmax: 132.5415 ymax: 33.50966 #> Geodetic CRS:  WGS 84 b <- get_boundary(d) #> options:        ENCODING=CP932  #> Reading layer `rcom' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/RtmpcloDHK/MA0001_2020_2020_38/rcom.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 3302 features and 11 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.0123 ymin: 32.88498 xmax: 133.6928 ymax: 34.30165 #> Geodetic CRS:  JGD2000 db <- filter_fude(d, b, \"\\u677e\\u5c71\\u5e02\", \"\\u57ce\\u6771\", year = 2022) #> Warning: attribute variables are assumed to be spatially constant throughout all geometries"},{"path":"https://takeshinishimura.github.io/fude/reference/get_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the agricultural community boundary data — get_boundary","title":"Get the agricultural community boundary data — get_boundary","text":"get_boundary() downloads reads one agricultural community boundary data provided MAFF.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/get_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the agricultural community boundary data — get_boundary","text":"","code":"get_boundary(data, year = 2020, quiet = FALSE, path = NULL, to_wgs84 = TRUE)"},{"path":"https://takeshinishimura.github.io/fude/reference/get_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the agricultural community boundary data — get_boundary","text":"data List sf::sf() objects. year Year agricultural community boundary data created. quiet logical. Suppress information data read. path Path ZIP file containing agricultural community boundary data; use local ZIP file instead going looking ZIP file. Specify directory containing one ZIP files, ZIP file . to_wgs84 logical. Convert JGD2000 WGS 84.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/get_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the agricultural community boundary data — get_boundary","text":"list sf::sf() objects.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/get_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the agricultural community boundary data — get_boundary","text":"","code":"if (FALSE) { # interactive() path <- system.file(\"extdata\", \"castle.zip\", package = \"fude\") d <- read_fude(path) b <- get_boundary(d) }"},{"path":"https://takeshinishimura.github.io/fude/reference/lg_code_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Local government code/name correspondence table — lg_code_table","title":"Local government code/name correspondence table — lg_code_table","text":"dataset containing codes/names local governments Japan.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/lg_code_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local government code/name correspondence table — lg_code_table","text":"","code":"lg_code_table"},{"path":"https://takeshinishimura.github.io/fude/reference/lg_code_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Local government code/name correspondence table — lg_code_table","text":"data frame 1,992 rows 6 variables: lg_code Local government codes pref_kanji Prefecture names written kanji city_kanji Local government names written kanji pref_kana Prefecture names written katakana city_kana Local government names written katakana romaji Local government names written romaji","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/ls_fude.html","id":null,"dir":"Reference","previous_headings":"","what":"Itemize the structure of Fude Polygon data — ls_fude","title":"Itemize the structure of Fude Polygon data — ls_fude","text":"ls_fude() lists year local government names (codes) order understand included list returned read_fude().","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/ls_fude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Itemize the structure of Fude Polygon data — ls_fude","text":"","code":"ls_fude(data)"},{"path":"https://takeshinishimura.github.io/fude/reference/ls_fude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Itemize the structure of Fude Polygon data — ls_fude","text":"data List sf::sf() objects.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/ls_fude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Itemize the structure of Fude Polygon data — ls_fude","text":"data.frame.","code":""},{"path":[]},{"path":"https://takeshinishimura.github.io/fude/reference/ls_fude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Itemize the structure of Fude Polygon data — ls_fude","text":"","code":"path <- system.file(\"extdata\", \"castle.zip\", package = \"fude\") d <- read_fude(path, stringsAsFactors = FALSE, quiet = TRUE) ls_fude(d) #>    full_names year  names local_government_cd city_kanji        romaji #> 1 2021_382019 2021 382019              382019     松山市 Matsuyama-shi #> 2 2022_382019 2022 382019              382019     松山市 Matsuyama-shi #> 3 2022_382078 2022 382078              382078     大洲市       Ozu-shi"},{"path":"https://takeshinishimura.github.io/fude/reference/pref_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Prefecture code/name correspondence table — pref_table","title":"Prefecture code/name correspondence table — pref_table","text":"dataset containing codes/names prefectures Japan.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/pref_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prefecture code/name correspondence table — pref_table","text":"","code":"pref_table"},{"path":"https://takeshinishimura.github.io/fude/reference/pref_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prefecture code/name correspondence table — pref_table","text":"data frame 47 rows 2 variables: pref_code Prefecture codes pref_kanji Prefecture names written kanji","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/read_fude.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Fude Polygon ZIP file — read_fude","title":"Read a Fude Polygon ZIP file — read_fude","text":"read_fude() reads Fude Polygon data list. data can downloaded MAFF website ZIP file, contains one GeoJSON format files. function also work ZIP file created, long change filenames original GeoJSON files.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/read_fude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Fude Polygon ZIP file — read_fude","text":"","code":"read_fude(path, stringsAsFactors = TRUE, quiet = FALSE, supplementary = TRUE)"},{"path":"https://takeshinishimura.github.io/fude/reference/read_fude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Fude Polygon ZIP file — read_fude","text":"path Path ZIP file containing one GeoJSON format files. stringsAsFactors logical. character vectors converted factors? quiet logical. Suppress information data read. supplementary logical. TRUE, add supplementary information polygon. Default TRUE.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/read_fude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Fude Polygon ZIP file — read_fude","text":"list sf::sf() objects.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/read_fude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Fude Polygon ZIP file — read_fude","text":"","code":"path <- system.file(\"extdata\", \"castle.zip\", package = \"fude\") d <- read_fude(path, stringsAsFactors = FALSE) #> Reading layer `2021_382019' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/Rtmp5gis3e/file16bad78018ccf/castle/2021_382019.json'  #>   using driver `GeoJSON' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.7653 ymin: 33.84506 xmax: 132.7662 ymax: 33.84575 #> Geodetic CRS:  WGS 84 #> Reading layer `2022_382019' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/Rtmp5gis3e/file16bad78018ccf/castle/2022_382019.json'  #>   using driver `GeoJSON' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.7653 ymin: 33.84506 xmax: 132.7662 ymax: 33.84575 #> Geodetic CRS:  WGS 84 #> Reading layer `2022_382078' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/Rtmp5gis3e/file16bad78018ccf/castle/2022_382078.json'  #>   using driver `GeoJSON' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.541 ymin: 33.50931 xmax: 132.5415 ymax: 33.50966 #> Geodetic CRS:  WGS 84"},{"path":"https://takeshinishimura.github.io/fude/reference/rename_fude.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename the Fude Polygon data — rename_fude","title":"Rename the Fude Polygon data — rename_fude","text":"rename_fude() renames 6-digit local government code list returned read_fude() corresponding Japanese name order make data human-friendly.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/rename_fude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename the Fude Polygon data — rename_fude","text":"","code":"rename_fude(data, suffix = TRUE, romaji = NULL, quiet = TRUE)"},{"path":"https://takeshinishimura.github.io/fude/reference/rename_fude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename the Fude Polygon data — rename_fude","text":"data List sf::sf() objects. suffix logical. FALSE, suffixes \"SHI\" \"KU\" local government names removed. romaji NULL, rename local government name romaji instead Japanese. Romanji format upper case unless specified. \"title\": Title case. \"lower\": Lower case. \"upper\": Upper case. quiet logical. Suppress information data read.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/rename_fude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename the Fude Polygon data — rename_fude","text":"list sf::sf() objects.","code":""},{"path":[]},{"path":"https://takeshinishimura.github.io/fude/reference/rename_fude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename the Fude Polygon data — rename_fude","text":"","code":"path <- system.file(\"extdata\", \"castle.zip\", package = \"fude\") d <- read_fude(path, stringsAsFactors = FALSE, quiet = FALSE) #> Reading layer `2021_382019' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/Rtmp5gis3e/file16bad3bffe990/castle/2021_382019.json'  #>   using driver `GeoJSON' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.7653 ymin: 33.84506 xmax: 132.7662 ymax: 33.84575 #> Geodetic CRS:  WGS 84 #> Reading layer `2022_382019' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/Rtmp5gis3e/file16bad3bffe990/castle/2022_382019.json'  #>   using driver `GeoJSON' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.7653 ymin: 33.84506 xmax: 132.7662 ymax: 33.84575 #> Geodetic CRS:  WGS 84 #> Reading layer `2022_382078' from data source  #>   `/private/var/folders/33/1nmp7drn6c56394qxrzb2cth0000gn/T/Rtmp5gis3e/file16bad3bffe990/castle/2022_382078.json'  #>   using driver `GeoJSON' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 132.541 ymin: 33.50931 xmax: 132.5415 ymax: 33.50966 #> Geodetic CRS:  WGS 84 d2 <- rename_fude(d) d2 <- rename_fude(d, suffix = FALSE) d2 <- d |> rename_fude(romaji = \"upper\")"},{"path":"https://takeshinishimura.github.io/fude/reference/shiny_fude.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Leaflet Map for Fude Polygon Data — shiny_fude","title":"Prepare Leaflet Map for Fude Polygon Data — shiny_fude","text":"Prepares Leaflet map Fude Polygon data.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/shiny_fude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Leaflet Map for Fude Polygon Data — shiny_fude","text":"","code":"shiny_fude(data, community = FALSE)"},{"path":"https://takeshinishimura.github.io/fude/reference/shiny_fude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Leaflet Map for Fude Polygon Data — shiny_fude","text":"data list data frame containing Fude Polygon data. community logical value indicating whether overlay community data map.","code":""},{"path":"https://takeshinishimura.github.io/fude/reference/shiny_fude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Leaflet Map for Fude Polygon Data — shiny_fude","text":"Leaflet map object Fude Polygon data HTML table.","code":""},{"path":[]},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-036","dir":"Changelog","previous_headings":"","what":"fude 0.3.6","title":"fude 0.3.6","text":"CRAN release: 2024-05-18 Added columns additional information farmland.","code":""},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-035","dir":"Changelog","previous_headings":"","what":"fude 0.3.5","title":"fude 0.3.5","text":"CRAN release: 2023-10-08 Simplified return value combine_fude() eliminating reduced version object.","code":""},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-034","dir":"Changelog","previous_headings":"","what":"fude 0.3.4","title":"fude 0.3.4","text":"CRAN release: 2023-09-19 Support polygon data split.","code":""},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-033","dir":"Changelog","previous_headings":"","what":"fude 0.3.3","title":"fude 0.3.3","text":"CRAN release: 2023-08-18 Added ability easily draw municipal boundaries.","code":""},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-032","dir":"Changelog","previous_headings":"","what":"fude 0.3.2","title":"fude 0.3.2","text":"Improved process eliminating duplicate agricultural community names.","code":""},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-031","dir":"Changelog","previous_headings":"","what":"fude 0.3.1","title":"fude 0.3.1","text":"CRAN release: 2023-07-15 Minor modifications due elapsed time samples long.","code":""},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-030","dir":"Changelog","previous_headings":"","what":"fude 0.3.0","title":"fude 0.3.0","text":"Added ability combine agricultural community boundary data.","code":""},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-020","dir":"Changelog","previous_headings":"","what":"fude 0.2.0","title":"fude 0.2.0","text":"CRAN release: 2023-06-14 Improved accuracy Roman renaming.","code":""},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-011","dir":"Changelog","previous_headings":"","what":"fude 0.1.1","title":"fude 0.1.1","text":"CRAN release: 2023-05-07 Minor improvements. Initial CRAN release.","code":""},{"path":"https://takeshinishimura.github.io/fude/news/index.html","id":"fude-010","dir":"Changelog","previous_headings":"","what":"fude 0.1.0","title":"fude 0.1.0","text":"Initial release.","code":""}]
